from telethon import TelegramClient, events, Button
from telethon.sessions import StringSession
from user_sessions import create_telegram_client, save_user_session, get_user_sessions_by_admin, restore_sessions
from db import add_admin, is_super_admin, is_admin, save_templates_for_bot, get_templates_by_bot_id, get_db_connection
from db import save_signal_template_for_bot, get_signal_template_by_bot_id, save_signal, get_signal, delete_signal
from config import API_ID, API_HASH, BOT_TOKEN, ACCOUNTS_PER_PAGE #, ALLOWED_CHATS
import asyncio
import re
from telethon.tl.custom import Button
from telethon.tl.types import User
import logging
from telethon.errors.rpcerrorlist import ChatAdminRequiredError
from telethon.tl.types import PeerUser
import mysql.connector
from telethon.errors import SessionPasswordNeededError, AuthKeyUnregisteredError
import handlers
from db import mark_existing_dialogs_as_handled
from telethon.tl.types import InputPeerEmpty
from telethon import functions, types

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
temp_login_data = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
processing_dialogs = {}
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
dialog_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(event):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = (
        "ü§ñ <b>–ì–∞–π–¥ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞!</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/login - –õ–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —é–∑–µ—Ä-–±–æ—Ç–∞.\n"
        "/settemplate - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è —é–∑–µ—Ä-–±–æ—Ç–∞. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä-–±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞.\n"
        "/setsignaltemplate - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —é–∑–µ—Ä-–±–æ—Ç–∞.\n"
        "/signal - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª.\n"
        "/deletesignal - –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª.\n"
        "/broadcastsignal - –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –µ–≥–æ –í–°–ï–ú –¥–∏–∞–ª–æ–≥–∞–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä-–±–æ—Ç–æ–≤.\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.\n\n"
        "<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>\n"
        "1. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ —é–∑–µ—Ä-–±–æ—Ç–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "2. –ï—Å–ª–∏ —é–∑–µ—Ä-–±–æ—Ç —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª—Å—è, –ø–æ–∫–∞ —á—Ç–æ —Ç—ã –Ω–∏–∫–∞–∫ –Ω–∞—Ö—É–π –æ–± —ç—Ç–æ–º –Ω–µ —É–∑–Ω–∞–µ—à—å, –µ—Å–ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ —á–µ–∫–∞–π –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —ç—Ç–æ—Ç –±–æ—Ç —ç—Ç–æ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ asfasasd. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –ª–æ–≥–∞–π –∑–∞–Ω–æ–≤–æ /login\n"
        "3. –ù–µ –∑–∞–±—É–¥—å –ø–æ—Å–ª–µ –ª–æ–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω, –∏–Ω–∞—á–µ –Ω–∏—Ö—É—è –Ω–µ –±—É–¥–µ—Ç\n"
        "4. –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —É–∂–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–æ –æ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    await event.respond(help_text, parse_mode='html')

# –õ–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
async def login_command(event, bot, api_id, api_hash):
    admin_id = event.sender_id

    if not is_admin(admin_id):
        await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await event.respond("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ª–æ–≥–∏–Ω–∞:")
    temp_login_data[admin_id] = {'step': 'phone'}

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
    client = TelegramClient(StringSession(), api_id, api_hash)
    await client.connect()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞
    temp_login_data[admin_id]['client'] = client
    await event.respond("–¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def handle_login_steps(event, bot):
    admin_id = event.sender_id

    if admin_id not in temp_login_data:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —à–∞–≥–æ–≤ –Ω–µ—Ç

    step = temp_login_data[admin_id].get('step')

    # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if step == 'phone':
        phone_number = event.raw_text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not phone_number or not phone_number.startswith('+') or not phone_number[1:].isdigit():
            await event.respond("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +78005553535")
            return
        
        temp_login_data[admin_id]['phone'] = phone_number
        temp_login_data[admin_id]['step'] = 'code'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
        client = temp_login_data[admin_id]['client']

        try:
            await client.send_code_request(phone_number)
            await event.respond(f"–ö–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥.")
            logging.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}.")
        except Exception as e:
            await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}: {str(e)}")
            del temp_login_data[admin_id]

    # –í–≤–æ–¥ –∫–æ–¥–∞
    elif step == 'code':
        code = event.raw_text.strip()
        client = temp_login_data[admin_id]['client']
        phone_number = temp_login_data[admin_id]['phone']

        try:
            await client.sign_in(phone_number, code)
            if await client.is_user_authorized():
                await event.respond("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                temp_login_data[admin_id]['step'] = 'description'
                await event.respond("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞:")
            else:
                await event.respond("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except SessionPasswordNeededError:
            await event.respond("–í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            temp_login_data[admin_id]['step'] = 'password'
        except Exception as e:
            await event.respond(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}: {str(e)}")
            del temp_login_data[admin_id]

    # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    elif step == 'password':
        password = event.raw_text.strip()
        client = temp_login_data[admin_id]['client']

        try:
            await client.sign_in(password=password)
            if await client.is_user_authorized():
                await event.respond("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º —É—Å–ø–µ—à–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞):")
                temp_login_data[admin_id]['step'] = 'description'
            else:
                await event.respond("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            await event.respond(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª–µ–º: {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª–µ–º: {str(e)}")
            del temp_login_data[admin_id]

    # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —é–∑–µ—Ä-–±–æ—Ç–∞
    elif step == 'description':
        description = event.raw_text.strip()
        phone_number = temp_login_data[admin_id]['phone']
        client = temp_login_data[admin_id]['client']

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user = await client.get_me()
            session_string = StringSession.save(client.session)
            await save_user_session(phone_number, session_string, user.id, admin_id, description)

            await event.respond(f"–°–µ—Å—Å–∏—è –¥–ª—è {phone_number} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logging.info(f"–°–µ—Å—Å–∏—è –¥–ª—è {phone_number} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ.")

            # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏–∞–ª–æ–≥–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            dialogs = await client.get_dialogs(limit=None, ignore_migrated=True)
            mark_existing_dialogs_as_handled(user.id, dialogs)
            logging.info(f"–î–∏–∞–ª–æ–≥–∏ –¥–ª—è –±–æ—Ç–∞ {user.id} —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ.")

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞
            client.add_event_handler(handlers.handle_new_message, events.NewMessage(incoming=True))
            asyncio.create_task(client.run_until_disconnected())  # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ

            logging.info(f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è {phone_number} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
            
        except Exception as e:
            await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}: {str(e)}")
        
        del temp_login_data[admin_id]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
def save_handled_dialog(bot_id, chat_id):
    connection = get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute(
            "INSERT INTO handled_dialogs (bot_id, chat_id) VALUES (%s, %s)",
            (bot_id, chat_id)
        )
        connection.commit()
        logging.info(f"–î–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º {bot_id} –∏ —á–∞—Ç–æ–º {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except mysql.connector.IntegrityError:
        logging.warning(f"–î–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º {bot_id} –∏ —á–∞—Ç–æ–º {chat_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ.")
    except mysql.connector.Error as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {err}")
    finally:
        cursor.close()
        connection.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–∏–∞–ª–æ–≥
def is_dialog_handled(bot_id, chat_id):
    connection = get_db_connection()
    cursor = connection.cursor()
    cursor.execute(
        "SELECT id FROM handled_dialogs WHERE bot_id = %s AND chat_id = %s",
        (bot_id, chat_id)
    )
    result = cursor.fetchone()
    cursor.close()
    connection.close()
    return result is not None

# –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–≤–µ–∑–¥–æ—á–∫–µ
async def handle_new_message(event):
    client_user = await event.client.get_me()
    bot_id = client_user.id  # ID —é–∑–µ—Ä-–±–æ—Ç–∞
    chat_id = event.chat_id  # ID —á–∞—Ç–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if not event.is_private:
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º. –ß–∞—Ç: {chat_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    if processing_dialogs.get((bot_id, chat_id)):
        logging.info(f"–î–∏–∞–ª–æ–≥ —Å —á–∞—Ç–æ–º {chat_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    # if chat_id not in ALLOWED_CHATS:
    #     logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º. –ß–∞—Ç: {chat_id}")
    #     return

    logging.info(f"–Æ–∑–µ—Ä-–±–æ—Ç {bot_id} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")

    # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–≤–µ—Ä—à–µ–Ω
    if is_dialog_handled(bot_id, chat_id):
        logging.info(f"–î–∏–∞–ª–æ–≥ —Å —á–∞—Ç–æ–º {chat_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if chat_id not in dialog_states:
        dialog_states[chat_id] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    current_index = dialog_states[chat_id]

    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    processing_dialogs[(bot_id, chat_id)] = True

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            peer = await event.client.get_entity(chat_id)
        except ValueError:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è —á–∞—Ç–∞ {chat_id}. –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤.")
            try:
                await event.client.get_dialogs()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
                peer = await event.client.get_entity(chat_id)  # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å
            except ValueError:
                logging.error(f"–í—Å–µ –µ—â–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
                processing_dialogs.pop((bot_id, chat_id), None)
                return

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±–æ—Ç–∞ –ø–æ –µ–≥–æ ID
        templates = get_templates_by_bot_id(bot_id)

        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        while current_index < len(templates):
            message_text, delay, requires_message = templates[current_index]

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
            await event.client(functions.messages.SetTypingRequest(
                peer=peer,
                action=types.SendMessageTypingAction()
            ))

            await asyncio.sleep(delay)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_index == 0:
                await event.reply(message_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text} (–∫–∞–∫ —Ä–µ–ø–ª–∞–π)")
            else:
                await event.client.send_message(chat_id, message_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–ø–ª–∞—è
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

            current_index += 1
            dialog_states[chat_id] = current_index  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if requires_message:
                logging.info("–û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.")
                processing_dialogs.pop((bot_id, chat_id), None)
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —à–∞–±–ª–æ–Ω —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±–æ—Ç–∞
        signal_template = get_signal_template_by_bot_id(bot_id)
        if signal_template is not None and len(signal_template) > 0:
            signal_dict = get_signal()
            if len(signal_dict) == 12:
                desc = ['id', 'admin_id', 'coin', 'direction_text', 'entry_price', 'leverage', 'rm',
                        'target1_price', 'target2_price', 'target3_price',
                        'stop_loss_price', 'liquidation_price']
                signal_dict = {d: signal_dict[i] for i, d in enumerate(desc)}
                logging.info(f'–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal_dict}')

                signal_template = signal_template[0][0]                
                message = signal_template.format(
                                    coin=signal_dict['coin'], direction_text=signal_dict['direction_text'],
                                    entry_price=f"{signal_dict['entry_price']}", leverage=signal_dict['leverage'], rm=signal_dict['rm'],
                                    target1_price=f"{signal_dict['target1_price']}",
                                    target2_price=f"{signal_dict['target2_price']}",
                                    target3_price=f"{signal_dict['target3_price']}",
                                    stop_loss_price=f"{signal_dict['stop_loss_price']}",
                                    liquidation_price=f"{signal_dict['liquidation_price']}"
                                )
                await event.client.send_message(chat_id, message)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}")

        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —à–∞–±–ª–æ–Ω–∞, –¥–∏–∞–ª–æ–≥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
        # if chat_id not in ALLOWED_CHATS:
        save_handled_dialog(bot_id, chat_id)
        logging.info(f"–î–∏–∞–ª–æ–≥ —Å —á–∞—Ç–æ–º {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π.")
        del dialog_states[chat_id]  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
    finally:
        # –£–±–∏—Ä–∞–µ–º —á–∞—Ç –∏–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        processing_dialogs.pop((bot_id, chat_id), None)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
def register_handlers(bot):

    @bot.on(events.NewMessage(pattern='/help'))
    async def handle_help(event):
        await help_command(event)

    @bot.on(events.NewMessage(pattern='/login'))
    async def login_handler(event):
        admin_id = event.sender_id
        await login_command(event, bot, API_ID, API_HASH)

    @bot.on(events.NewMessage)
    async def handle_login(event):
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —à–∞–≥–æ–≤ –ª–æ–≥–∏–Ω–∞
        await handle_login_steps(event, bot)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    @bot.on(events.NewMessage(pattern='/signal'))
    async def signal_handler(event):
        sender = await event.get_sender()
        admin_id = event.sender_id

        if not is_admin(admin_id):
            await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        if not event.is_private:
            await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
            return

        async with bot.conversation(sender) as conv:
            try:
                signal_variables = ['coin', 'direction_text', 'entry_price', 'leverage', 'rm',
                                    'target1_price', 'target2_price', 'target3_price', 'stop_loss_price', 'liquidation_price']
                await conv.send_message(
                    "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏):\n"
                    "\n"
                    "coin: BTC\n"
                    "direction_text: LONG\n"
                    "entry_price: 0.04383\n"
                    "leverage: 20\n"
                    "rm: 40\n"
                    "target1_price: 0.45666\n"
                    "target2_price: 0.45699\n"
                    "target3_price: 0.46999\n"
                    "stop_loss_price: 0.00999\n"
                    "liquidation_price: 0.00023\n"
                )
                conv_event = await conv.wait_event(events.NewMessage)
                signal = conv_event.raw_text.strip()
                signal_parts = signal.split("\n")
                input_dict = {x.split(':', maxsplit=1)[0]: x.split(':', maxsplit=1)[1].strip() for x in signal_parts}

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞.
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Å–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–°–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∏ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –ª–∏ –æ–Ω –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.
                # –ù—É–∂–Ω–æ 10 —Å—Ç—Ä–æ–∫, –≤–æ–æ–±—â–µ –≥–æ–≤–æ—Ä—è –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ signal_variables
                is_format_wrong = False
                if len(signal_parts) != 10:
                    is_format_wrong = True
                else:
                    if set(input_dict) != set(signal_variables):
                        is_format_wrong = True
                if is_format_wrong:
                    await conv_event.respond("–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n"
                                             "–í—ã–∑–æ–≤–∏—Ç–µ /signal —Å–Ω–æ–≤–∞, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    return

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É.
                logging.info(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É:\n{input_dict}")
                signal_saved = save_signal(admin_id, input_dict)
                await conv_event.respond("–°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!" if signal_saved else "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª!")
                return

            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ /signal: {str(e)}')
                return

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    @bot.on(events.NewMessage(pattern='/deletesignal'))
    async def signal_handler(event):
        admin_id = event.sender_id

        if not is_admin(admin_id):
            await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        if not event.is_private:
            await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
            return

        is_signal_deleted = delete_signal(admin_id)
        await event.respond("–°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!" if is_signal_deleted else "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª!")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    @bot.on(events.NewMessage(pattern='/broadcastsignal'))
    async def broadcast_signal_handler(event):
        sender = await event.get_sender()
        admin_id = event.sender_id
        sessions = get_user_sessions_by_admin(admin_id, need_login_str=True)

        if not is_admin(admin_id):
            await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        if not sessions:
            await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä-–±–æ—Ç–æ–≤.")
            return

        async with bot.conversation(sender) as conv:

            # Get the list of sessions available to the user
            selected_sessions = []

            while True:
                # Update buttons to show selected channels with a check mark
                session_buttons = []
                session_buttons.append([Button.inline("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", "choose_all")])
                session_buttons.extend([[Button.inline(text=f"{session[2]}{' ‚úÖ' if str(session[2]) in selected_sessions else ''}",
                                                       data=f"session:{session[2]}")]
                                         for session in sessions])
                session_buttons.append([Button.inline("–ì–æ—Ç–æ–≤–æ", "done")])
                session_buttons.append([Button.inline("–û—Ç–º–µ–Ω–∞", b"cancel")])
                msg = await conv.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞:", buttons=session_buttons)

                conv_event = await conv.wait_event(events.CallbackQuery)
                data = conv_event.data.decode('utf-8')
                await conv_event.answer()

                if data == 'choose_all':
                    for session in sessions:
                        selected_sessions.append(session[2])
                    await msg.delete()

                if data == 'done':
                    await msg.delete()
                    break

                if data == 'cancel':
                    await conv.send_message("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return

                if data.startswith('session:'):
                    session_desc = data.split(':')[1]
                    if session_desc in selected_sessions:
                        selected_sessions.remove(session_desc)
                    else:
                        selected_sessions.append(session_desc)
                    await msg.delete()

            if not selected_sessions:
                await conv.send_message("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
                return

            ####
            ## –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–≥–Ω–∞–ª–æ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
            ####
            await conv.send_message("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±—Ä–æ–∞–¥–∫–∞—Å—Ç–∏–Ω–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏):\n"
                                    "\n"
                                    "coin: BTC\n"
                                    "direction_text: LONG\n"
                                    "entry_price: 0.04383\n"
                                    "leverage: 20\n"
                                    "rm: 40\n"
                                    "target1_price: 0.45666\n"
                                    "target2_price: 0.45699\n"
                                    "target3_price: 0.46999\n"
                                    "stop_loss_price: 0.00999\n"
                                    "liquidation_price: 0.00023\n")

            signal = (await conv.get_response()).text
            signal_parts = signal.split("\n")
            signal_dict = {x.split(':', maxsplit=1)[0]: x.split(':', maxsplit=1)[1].strip() for x in signal_parts}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞.
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Å–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–°–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∏ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –ª–∏ –æ–Ω –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.
            signal_variables = ['coin', 'direction_text', 'entry_price', 'leverage', 'rm',
                                'target1_price', 'target2_price', 'target3_price', 'stop_loss_price', 'liquidation_price']
            is_format_wrong = False
            if len(signal_parts) != 10:
                is_format_wrong = True
            else:
                if set(signal_dict) != set(signal_variables):
                    is_format_wrong = True
            if is_format_wrong:
                await conv_event.respond("–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n"
                                         "–í—ã–∑–æ–≤–∏—Ç–µ /signal —Å–Ω–æ–≤–∞, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return

            ####
            ## –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ—Å—Å–∏—è–º
            ####
            selected_sessions = [s for s in sessions if s[2] in selected_sessions]
            logging.info(f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {selected_sessions}')

            for session in selected_sessions:
                try:
                    bot_id = session[3]
                    client = TelegramClient(StringSession(session[1]), API_ID, API_HASH)
                    await client.connect()
                    dialogs = await client.get_dialogs()
                    for dialog in dialogs:
                        chat_id = dialog.id
                        chat_type = dialog.entity
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã –≤ –¥–∏–∞–ª–æ–≥–∞—Ö, —Å–ø–∞–º–∏–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–∏.
                        if type(chat_type) is not User:
                            continue
                        # if chat_id in ALLOWED_CHATS:  
                        signal_template = get_signal_template_by_bot_id(bot_id)
                        if len(signal_template) > 0:
                            signal_template = signal_template[0][0]
                            message = signal_template.format(coin=signal_dict['coin'], direction_text=signal_dict['direction_text'],
                                                            entry_price=f"{signal_dict['entry_price']}", leverage=signal_dict['leverage'], rm=signal_dict['rm'],
                                                            target1_price=f"{signal_dict['target1_price']}",
                                                            target2_price=f"{signal_dict['target2_price']}",
                                                            target3_price=f"{signal_dict['target3_price']}",
                                                            stop_loss_price=f"{signal_dict['stop_loss_price']}",
                                                            liquidation_price=f"{signal_dict['liquidation_price']}")
                            await client.send_message(chat_id, message)
                            logging.info(f'–ë—Ä–æ–∞–¥–∫–∞—Å—Ç –¥–ª—è –±–æ—Ç–∞ {bot_id} –≤ –¥–∏–∞–ª–æ–≥ {chat_id}')
                    client.add_event_handler(handlers.handle_new_message, events.NewMessage(incoming=True))
                    asyncio.create_task(client.run_until_disconnected())
                except Exception as e:
                    logging.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –±—Ä–æ–∞–¥–∫–∞—Å—Ç–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session[2]}. –û—à–∏–±–∫–∞: {str(e)}')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    @bot.on(events.NewMessage(pattern='/settemplate'))
    async def set_template_handler(event):
        admin_id = event.sender_id
        sessions = get_user_sessions_by_admin(admin_id)

        if not sessions:
            await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä-–±–æ—Ç–æ–≤.")
            return

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_bot_page(event, sessions, page=0, template_type='select_bot')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    @bot.on(events.NewMessage(pattern='/setsignaltemplate'))
    async def set_signal_template_handler(event):
        admin_id = event.sender_id
        sessions = get_user_sessions_by_admin(admin_id)

        if not sessions:
            await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä-–±–æ—Ç–æ–≤.")
            return

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_bot_page(event, sessions, page=0, template_type='select_bot_signal')

    async def show_bot_page(event, sessions, page, template_type):
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        start = page * ACCOUNTS_PER_PAGE
        end = start + ACCOUNTS_PER_PAGE
        page_sessions = sessions[start:end]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        buttons = [
            [Button.inline(f"{bot_label.strip()} ({phone_number.strip()})", data=f"{template_type}:{user_id}")]
            for phone_number, bot_label, user_id in page_sessions
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(Button.inline("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", data=f"prev_page:{page - 1}:{template_type}"))
        if end < len(sessions):
            pagination_buttons.append(Button.inline("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", data=f"next_page:{page + 1}:{template_type}"))

        if pagination_buttons:
            buttons.append(pagination_buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å
        await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞:", buttons=buttons)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    @bot.on(events.CallbackQuery(pattern=r'prev_page|next_page'))
    async def handle_pagination(event):
        _, page, template_type = event.data.decode('utf-8').split(':')
        page = int(page)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_id = event.sender_id
        sessions = get_user_sessions_by_admin(admin_id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await show_bot_page(event, sessions, page, template_type)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞
    @bot.on(events.CallbackQuery(pattern=b'select_bot:'))
    async def select_bot_callback(event):
        admin_id = event.sender_id
        data = event.data.decode('utf-8')
        bot_id = int(data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –ø–æ ID
        sessions = get_user_sessions_by_admin(admin_id)
        bot_label = next((bot_label for pn, bot_label, uid in sessions if uid == bot_id), None)

        if bot_label:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            temp_login_data[admin_id] = {
                'selected_bot': bot_label,
                'bot_id': bot_id,
                'step': 'template'
            }
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —à–∞–±–ª–æ–Ω –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ —Å –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
            await event.edit(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç–∞: {bot_label}. –í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "\n"
                "[—Å–æ–æ–±—â–µ–Ω–∏–µ1]{–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö}\n"
                "[—Å–æ–æ–±—â–µ–Ω–∏–µ2]{–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö}*\n"
                "[—Å–æ–æ–±—â–µ–Ω–∏–µ3]{–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö}\n"
                "\n"
                "–ó–Ω–∞–∫ * –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è 2 –±–æ—Ç –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. "
                "–ó–≤–µ–∑–¥–æ—á–µ–∫ –≤ —à–∞–±–ª–æ–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ."
            )
        else:
            await event.edit("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞
    @bot.on(events.CallbackQuery(pattern=b'select_bot_signal:'))
    async def select_bot_signal_callback(event):
        admin_id = event.sender_id
        data = event.data.decode('utf-8')
        bot_id = int(data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –ø–æ ID
        sessions = get_user_sessions_by_admin(admin_id)
        bot_label = next((bot_label for pn, bot_label, uid in sessions if uid == bot_id), None)

        if bot_label:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            temp_login_data[admin_id] = {
                'selected_bot': bot_label,
                'bot_id': bot_id,
                'step': 'template_signal'
            }
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —à–∞–±–ª–æ–Ω –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ —Å –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
            await event.edit(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç–∞: {bot_label}. –í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–∏–≥–Ω–∞–ª–∞:\n"
                "\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                "\n"
                "{coin} - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å USDT –¥–ª—è –ø–∞—Ä—ã)\n"
                "{direction_text} - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞\n"
                "{entry_price} - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞\n"
                "{leverage} - –ü–ª–µ—á–æ (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–ø–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å x)\n"
                "{rm} - –†–∏—Å–∫ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç (–ø–æ—Å–ª–µ –ø–∏—à–µ—Ç—Å—è –Ω–∞–ø—Ä–∏–º–µ—Ä % –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞)\n"
                "{target1_price} - –¶–µ–Ω–∞ –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏\n"
                "{target2_price} - –¶–µ–Ω–∞ –≤—Ç–æ—Ä–æ–π —Ü–µ–ª–∏\n"
                "{target3_price} - –¶–µ–Ω–∞ —Ç—Ä–µ—Ç—å–µ–π —Ü–µ–ª–∏\n"
                "{stop_loss_price} - –¶–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞\n"
                "{liquidation_price} - –¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏\n"
                "\n"
            )
        else:
            await event.edit("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–≤–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–≤–µ–∑–¥–æ—á–∫–∏
    @bot.on(events.NewMessage)
    async def template_input_handler(event):
        admin_id = event.sender_id

        if admin_id in temp_login_data and temp_login_data[admin_id]['step'] == 'template':
            template_text = event.raw_text.strip()
            bot_id = temp_login_data[admin_id]['bot_id']

            # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–≤–µ–∑–¥–æ—á–∫–∏
            pattern = re.compile(r'\[(.*?)\]\{(\d+)\}(\*)?')
            matches = pattern.findall(template_text)

            if not matches:
                await event.respond("–®–∞–±–ª–æ–Ω –≤–≤–µ–¥—ë–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ requires_message
            templates = [
                (message_text.strip(), int(delay), bool(star))
                for message_text, delay, star in matches
            ]

            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
                save_templates_for_bot(admin_id, bot_id, templates)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                selected_bot = temp_login_data[admin_id]['selected_bot']
                await event.respond(f"–®–∞–±–ª–æ–Ω –¥–ª—è –±–æ—Ç–∞ '{selected_bot}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                del temp_login_data[admin_id]

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
                await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–≤–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞
    @bot.on(events.NewMessage)
    async def template_signal_input_handler(event):
        admin_id = event.sender_id

        if admin_id in temp_login_data and temp_login_data[admin_id]['step'] == 'template_signal':
            template_text = event.raw_text.strip()
            bot_id = temp_login_data[admin_id]['bot_id']

            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
                save_signal_template_for_bot(bot_id, template_text)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                selected_bot = temp_login_data[admin_id]['selected_bot']
                await event.respond(f"–®–∞–±–ª–æ–Ω —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±–æ—Ç–∞ '{selected_bot}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                del temp_login_data[admin_id]

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
                await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")